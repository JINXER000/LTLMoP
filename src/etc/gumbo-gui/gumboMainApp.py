#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 57e7a7d844ed on Wed May  1 22:57:41 2013
#

import wx, wx.richtext

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

import os, sys

# Climb the tree to find out where we are
p = os.path.abspath(__file__)
t = ""
while t != "src":
    (p, t) = os.path.split(p)
    if p == "":
        print "I have no idea where I am; this is ridiculous"
        sys.exit(1)

ltlmop_root = p
sys.path.append(os.path.join(p,"src","lib"))

#######################################################
############## CONFIGURATION SECTION ##################
#######################################################
class config:
    base_spec_file = os.path.join(ltlmop_root, "src", "examples", "gumbotest", "test.spec")





#######################################################
#######################################################

import project
import mapRenderer
from specCompiler import SpecCompiler

class GumboMainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: GumboMainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.window_1 = wx.SplitterWindow(self, wx.ID_ANY, style=wx.SP_3D | wx.SP_BORDER | wx.SP_LIVE_UPDATE)
        self.map_pane = wx.Panel(self.window_1, wx.ID_ANY, style=wx.TAB_TRAVERSAL | wx.FULL_REPAINT_ON_RESIZE)
        self.dialogue_pane = wx.Panel(self.window_1, wx.ID_ANY)
        self.text_ctrl_dialogue = wx.richtext.RichTextCtrl(self.dialogue_pane, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
        self.text_ctrl_input = wx.TextCtrl(self.dialogue_pane, wx.ID_ANY, "")
        self.button_submit = wx.Button(self.dialogue_pane, wx.ID_ANY, _("Submit!"))

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.onSubmitInput, self.button_submit)
        self.Bind(wx.EVT_SPLITTER_SASH_POS_CHANGED, self.onResize, self.window_1)
        # end wxGlade

        self.window_1.SetSashGravity(0.5)
        self.window_1.SetMinimumPaneSize(100)

        self.map_pane.SetBackgroundStyle(wx.BG_STYLE_CUSTOM)
        self.mapBitmap = None

        self.map_pane.Bind(wx.EVT_PAINT, self.onPaint)
        self.Bind(wx.EVT_ERASE_BACKGROUND, self.onEraseBG)

        self.dialogueManager = None
        self.proj = project.Project()
        self.proj.loadProject(config.base_spec_file)
        self.Bind(wx.EVT_SIZE, self.onResize, self)
        self.onResize()

        self.appendLog("Hello.", "System")


    def __set_properties(self):
        # begin wxGlade: GumboMainFrame.__set_properties
        self.SetTitle(_("gumbo main window"))
        self.SetSize((883, 495))
        self.text_ctrl_input.SetFocus()
        self.button_submit.SetDefault()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: GumboMainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.text_ctrl_dialogue, 1, wx.ALL | wx.EXPAND, 5)
        sizer_3.Add(self.text_ctrl_input, 1, wx.RIGHT | wx.EXPAND, 5)
        sizer_3.Add(self.button_submit, 0, 0, 0)
        sizer_2.Add(sizer_3, 0, wx.ALL | wx.EXPAND, 5)
        self.dialogue_pane.SetSizer(sizer_2)
        self.window_1.SplitVertically(self.map_pane, self.dialogue_pane)
        sizer_1.Add(self.window_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def appendLog(self, message, agent=None):
        if agent is not None:
            self.text_ctrl_dialogue.BeginBold()
            self.text_ctrl_dialogue.WriteText(agent + ": ")
            self.text_ctrl_dialogue.EndBold()

        self.text_ctrl_dialogue.WriteText(message + "\n")

        self.text_ctrl_dialogue.ShowPosition(self.text_ctrl_dialogue.GetLastPosition())
        self.text_ctrl_dialogue.Refresh()

    def onSubmitInput(self, event):  # wxGlade: GumboMainFrame.<event_handler>
        if self.text_ctrl_input.GetValue() == "":
            event.Skip()
            return
        
        user_text = self.text_ctrl_input.GetValue()

        # echo
        self.appendLog(user_text, "User")

        self.text_ctrl_input.Clear()

        # response
        if self.dialogueManager is None:
            self.appendLog("Dialogue manager not initialized", "!!! Error")
        else:
            sys_text = self.dialogueManager.tell(user_text, self.currentGoal)
            self.appendLog(sys_text, "System")

        event.Skip()

    def onResize(self, event=None):  # wxGlade: GumboMainFrame.<event_handler>
        size = self.map_pane.GetSize()
        self.mapBitmap = wx.EmptyBitmap(size.x, size.y)
        self.mapScale = mapRenderer.drawMap(self.mapBitmap, self.proj.rfi, scaleToFit=True, drawLabels=mapRenderer.LABELS_ALL_EXCEPT_OBSTACLES, memory=True)

        self.Refresh()
        self.Update()

        if event is not None:
            event.Skip()

    def onEraseBG(self, event):
        # Avoid unnecessary flicker by intercepting this event
        pass

    def onPaint(self, event=None):
        if self.mapBitmap is None:
            return

        if event is None:
            dc = wx.ClientDC(self.map_pane)
        else:
            pdc = wx.AutoBufferedPaintDC(self.map_pane)
            try:
                dc = wx.GCDC(pdc)
            except:
                dc = pdc

        dc.BeginDrawing()

        # Draw background
        dc.DrawBitmap(self.mapBitmap, 0, 0)

        # Draw robot
#        if self.robotPos is not None:
#            [x,y] = map(lambda x: int(self.mapScale*x), self.robotPos) 
#            dc.DrawCircle(x, y, 5)
#        if self.markerPos is not None:
#            [m,n] = map(lambda m: int(self.mapScale*m), self.markerPos) 
#            dc.SetBrush(wx.Brush(wx.RED))
#            dc.DrawCircle(m, n, 5)


        dc.EndDrawing()
        
        if event is not None:
            event.Skip()

# end of class GumboMainFrame

class GumboMainApp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        gumboMainFrame = GumboMainFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(gumboMainFrame)
        gumboMainFrame.Show()
        return 1

# end of class GumboMainApp

if __name__ == "__main__":
    gettext.install("gumboMainApp") # replace with the appropriate catalog name

    gumboMainApp = GumboMainApp(0)
    gumboMainApp.MainLoop()
